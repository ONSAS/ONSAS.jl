using LinearAlgebra: tr
using SparseArrays: SparseMatrixCSC
using Reexport

using ..HyperElasticMaterials
using ...Utils

@reexport import ..LinearElasticMaterials: lame_parameters, elasticity_modulus, shear_modulus,
                                           bulk_modulus,
                                           poisson_ratio
@reexport import ..HyperElasticMaterials: cosserat_stress, strain_energy

export SVK

""" 
Material with Saint-Venant-Kirchhoff properties.
The strain energy `Œ®` is: `Œ®(ùîº)` = `Œª`/2 tr(`ùîº`)^2 + `G` tr(`ùîº`^2).

For context see the [Hyperelastic material](https://en.wikipedia.org/wiki/Hyperelastic_material) wikipedia article.

It is also possible to construct an `SVK` material given its elasticity and shear modulus `E`, `ŒΩ` respectively and its density `œÅ`. 
For context see the [Lam√© parameters](https://en.wikipedia.org/wiki/Lam%C3%A9_parameters) wikipedia article.
"""
struct SVK{T<:Real,R<:Union{T,Nothing}} <: AbstractHyperElasticMaterial
    "First Lam√© parameter."
    Œª::T
    "Shear modulus or second Lam√© parameter (Œº)."
    G::T
    "Density (`nothing` for static cases)."
    œÅ::R
    "Material label."
    label::Label
    function SVK(Œª::T, G::T, œÅ::R, label::Label=NO_LABEL) where {T<:Real,R<:Union{Nothing,Real}}
        if œÅ isa Real
            œÅ > 0 || error("Density must be positive.")
        end
        @assert Œª ‚â• 0 "The first Lam√© parameter `Œª` must be positive."
        @assert G ‚â• 0 "The second Lam√© parameter or shear modulus `G` must be positive."
        return new{T,R}(Œª, G, œÅ, Symbol(label))
    end
end
function SVK(Œª::T, G::T, label::Label=NO_LABEL) where {T<:Real,R<:Union{Nothing,Real}}
    SVK(Œª, G, nothing, label)
end
function SVK(; E::Real, ŒΩ::Real, œÅ::R=nothing, label::Label=NO_LABEL) where {R<:Union{Nothing,Real}}
    # Compute Œª and Œº (Œº = G) given E and ŒΩ.
    Œª = E * ŒΩ / ((1 + ŒΩ) * (1 - 2 * ŒΩ))
    G = E / (2 * (1 + ŒΩ))
    return SVK(Œª, G, œÅ, label)
end

"Return the strain energy for a `SVK` material `m` and the Green-Lagrange strain tensor `ùîº`."
function strain_energy(m::SVK, ùîº::AbstractMatrix)
    Œª, G = lame_parameters(m)
    return Œª / 2 * tr(ùîº)^2 + G * tr(ùîº^2)
end

"Return Lam√© parameters `Œª` and `G` from a `SVK` material `m`."
lame_parameters(m::SVK) = m.Œª, m.G

"Return the shear modulus `G` from a `SVK` material `m`."
shear_modulus(m::SVK) = m.G

"Return the Poisson's ration `ŒΩ` form a `SVK` material `m`."
function poisson_ratio(m::SVK)
    Œª, G = lame_parameters(m)
    return Œª / (2 * (Œª + G))
end

"Return the elasticity modulus `E` form a `SVK` material `m`."
function elasticity_modulus(m::SVK)
    Œª, G = lame_parameters(m)
    return G * (3 * Œª + 2 * G) / (Œª + G)
end

"Return the bulk_modulus `K` for a `SVK` material `m`."
function bulk_modulus(m::SVK)
    Œª, G = lame_parameters(m)
    return Œª + 2 * G / 3
end

"Return the Cosserat or Second-Piola Kirchoff stress tensor `ùïä` 
considering a `SVK` material `m` and the Lagrangian Green 
strain tensor `ùîº`.Also this function provides `‚àÇùïä‚àÇùîº` for the iterative method."
function cosserat_stress(m::SVK, ùîº::AbstractMatrix)
    Œª, G = lame_parameters(m)
    ùïä = Œª * tr(ùîº) * eye(3) + 2 * G * ùîº

    ‚àÇùïä‚àÇùîº = zeros(6, 6)
    ‚àÇùïä‚àÇùîº[1:3, 1:3] = Œª * ones(3, 3) + 2 * G * eye(3)
    ‚àÇùïä‚àÇùîº[4:6, 4:6] = G * eye(3)

    return ùïä, ‚àÇùïä‚àÇùîº
end

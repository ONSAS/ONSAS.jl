"Module defining a Saint-Venant-Kirchhoff material model."
module SvkMaterial

using LinearAlgebra, SparseArrays, Reexport

using ..HyperElasticMaterials
using ..Utils

@reexport import ..LinearElasticMaterials: lame_parameters, elasticity_modulus, shear_modulus,
                                           bulk_modulus, poisson_ratio
@reexport import ..HyperElasticMaterials: cosserat_stress, strain_energy

export Svk

"""
Material with Saint-Venant-Kirchhoff properties.
The strain energy `Œ®` is: `Œ®(ùîº)` = `Œª`/2 tr(`ùîº`)^2 + `G` tr(`ùîº`^2).

For context see the [Hyperelastic material](https://en.wikipedia.org/wiki/Hyperelastic_material) wikipedia article.

It is also possible to construct an `Svk` material given its elasticity and shear modulus `E`, `ŒΩ` respectively and its density `œÅ`.
For context see the [Lam√© parameters](https://en.wikipedia.org/wiki/Lam%C3%A9_parameters) wikipedia article.
"""
struct Svk{T<:Real} <: AbstractHyperElasticMaterial
    "First Lam√© parameter."
    Œª::T
    "Shear modulus or second Lam√© parameter (Œº)."
    G::T
    "Density (`nothing` for static cases)."
    œÅ::Density
    "Material label."
    label::Label
    function Svk(Œª::T, G::T, œÅ::Density, label::Label=NO_LABEL) where {T<:Real}
        if œÅ isa Real
            œÅ > 0 || error("Density must be positive.")
        end
        @assert Œª ‚â• 0 "The first Lam√© parameter `Œª` must be positive."
        @assert G ‚â• 0 "The second Lam√© parameter or shear modulus `G` must be positive."
        new{T}(Œª, G, œÅ, Symbol(label))
    end
end

"Constructor for `Svk` material with no density."
function Svk(Œª::T, G::T, label::Label=NO_LABEL) where {T<:Real}
    Svk(Œª, G, nothing, label)
end

"Constructor from elasticity and shear modulus `E`, `ŒΩ` respectively and density `œÅ`."
function Svk(; E::Real, ŒΩ::Real, œÅ::Density=nothing, label::Label=NO_LABEL)
    Œª = E * ŒΩ / ((1 + ŒΩ) * (1 - 2 * ŒΩ))
    G = E / (2 * (1 + ŒΩ))
    Svk(Œª, G, œÅ, label)
end

"Return the strain energy for a `Svk` material `m` and the Green-Lagrange strain tensor `ùîº`."
function strain_energy(m::Svk, ùîº::AbstractMatrix)
    Œª, G = lame_parameters(m)
    Œª / 2 * tr(ùîº)^2 + G * tr(ùîº^2)
end

"Return Lam√© parameters `Œª` and `G` from a `Svk` material `m`."
lame_parameters(m::Svk) = m.Œª, m.G

"Return the shear modulus `G` from a `Svk` material `m`."
shear_modulus(m::Svk) = m.G

"Return the Poisson's ration `ŒΩ` form a `Svk` material `m`."
function poisson_ratio(m::Svk)
    Œª, G = lame_parameters(m)
    Œª / (2 * (Œª + G))
end

"Return the elasticity modulus `E` form a `Svk` material `m`."
function elasticity_modulus(m::Svk)
    Œª, G = lame_parameters(m)
    G * (3 * Œª + 2 * G) / (Œª + G)
end

"Return the bulk_modulus `K` for a `Svk` material `m`."
function bulk_modulus(m::Svk)
    Œª, G = lame_parameters(m)
    Œª + 2 * G / 3
end

"Return the Cosserat or Second-Piola Kirchoff stress tensor `ùïä`
considering a `Svk` material `m` and the Lagrangian Green
strain tensor `ùîº`.Also this function provides `‚àÇùïä‚àÇùîº` for the iterative method."
function cosserat_stress(m::Svk, ùîº::AbstractMatrix)
    Œª, G = lame_parameters(m)
    ùïä = Œª * tr(ùîº) * eye(3) + 2 * G * ùîº

    ‚àÇùïä‚àÇùîº = zeros(6, 6)
    ‚àÇùïä‚àÇùîº[1:3, 1:3] = Œª * ones(3, 3) + 2 * G * eye(3)
    ‚àÇùïä‚àÇùîº[4:6, 4:6] = G * eye(3)

    ùïä, ‚àÇùïä‚àÇùîº
end

end

# --------------------------------------------------
# Cylinder submitted to an Internal Pressure Example  
#----------------------------------------------------
using ONSAS
using Test: @test, @testset
## scalar parameters (dimensions in mm an MPa)
p = 1e-2 # internal pressure in MPa
L = 75 # cylinder length in ùêû‚Çñ mm
R·µ¢ = 100 # inner radius in mm
R‚Çë = 200 # outer radius in mm

# Run gmsh to generate the mesh
command = `gmsh -3 examples/cylinder_internal_pressure/cylinder.geo`
run(command)




E = 210  # Young modulus in MPa
ŒΩ = 0.3  # Poisson ratio
# ------------------------------------------
# Case 1 - `IsoptrpicLinearElastic` material
# -------------------------------------------
"Creates the `Structure `"
function structure(E::Real, ŒΩ::Real)
    # -------------------------------
    # Entities
    # -------------------------------
    # Entities types without assigned nodes, faces and elements
    faces_label = "triangle"
    elements_label = "tetrahedron"
    vfaces = [TriangularFace(faces_label)]
    velems = [Tetrahedron(elements_label)]
    s_entities = StructuralEntities(velems, vfaces)
    entities_labels = [faces_label, elements_label]
    # -------------------------------
    # Mesh
    # -------------------------------
    filename = "cylinder"
    msh_file = MshFile(filename)
    s_mesh = Mesh(mesh_file, s_entities)

end
#=
# -------------------------------
# Boundary conditions
# -------------------------------
# Fixed dofs
bc‚ÇÅ_label = "fixed-ux"
bc‚ÇÅ = FixedDofBoundaryCondition([:u], [1], bc‚ÇÅ_label)
bc‚ÇÇ_label = "fixed-uj"
bc‚ÇÇ = FixedDofBoundaryCondition([:u], [2], bc‚ÇÇ_label)
bc‚ÇÉ_label = "fixed-uk"
bc‚ÇÉ = FixedDofBoundaryCondition([:u], [3], bc‚ÇÉ_label)
# Load
bc‚ÇÑ_label = "pressure"
bc‚ÇÑ_pressure_function(t) = -p * t # pressure function towards -ùêû·µ£
bc‚ÇÑ = LocalPressureBoundaryCondition([:u], t -> [bc‚ÇÑ_pressure_function(t)], bc‚ÇÑ_label)
# Create the  bcs vector
bc_labels = [bc‚ÇÅ_label, bc‚ÇÇ_label, bc‚ÇÉ_label, bc‚ÇÑ_label]
# BoundaryConditions types without assigned node, feces and elements
bcs = [bc‚ÇÅ, bc‚ÇÇ, bc‚ÇÉ, bc‚ÇÑ]
s_boundary_conditions = StructuralBoundaryConditions(bcs)
# Assign boundary conditions to the ones defined in the mesh
apply!(s_boundary_conditions, s_mesh)
# -------------------------------
# Materials
# -------------------------------
mat_label = "linear_elastic"
mat = IsotropicLinearElastic(E, ŒΩ, mat_label)
s_materials = StructuralMaterials([mat])
# Assign material to the elements defined in the mesh
apply!(s_materials, s_mesh)
=#

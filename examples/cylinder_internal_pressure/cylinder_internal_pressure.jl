# --------------------------------------------------
# Cylinder submitted to an Internal Pressure Example  
#----------------------------------------------------
using LinearAlgebra: norm
using ONSAS
using StaticArrays: SVector
using Test: @test, @testset
using Suppressor: @capture_out
using TimerOutputs: @timeit, reset_timer!, print_timer
## scalar parameters (dimensions in mm an MPa)
L‚Çñ = 30; # cylinder length in ùêû‚Çñ mm
R·µ¢ = 100; # inner radius in mm
R‚Çë = 200; # outer radius in mm
p = 30; # internal pressure in MPa
E = 210.0;  # Young modulus in MPa
ŒΩ = 0.3;  # Poisson ratio
pressure(t::Real) = -p * t
## number of steps 
NSTEPS = 9
## tolerances for testing
ATOL = 1e-2 * (R‚Çë - R·µ¢)
## Plot results
plot_results = true
"Creates the mesh."
function create_msh()
    # Run gmsh to generate the mesh
    command = `gmsh -3 examples/cylinder_internal_pressure/cylinder.geo`
    # Generate the mesh and capture the outputs
    o = @capture_out begin
        run(command)
    end
    gmsh_println(o)
end
out_gmsh = create_msh()
"Builds the `Structure`."
function cylinder_structure(
    material::AbstractMaterial,
    L::Real, R·µ¢::Real, R‚Çë::Real,
    p::Function
)
    # Materials
    # -------------------------------
    materials = StructuralMaterials(material)
    # -------------------------------
    # Boundary conditions
    # -------------------------------
    # Dirichlet boundary conditions 
    bc‚ÇÅ_label = "fixed-ui"
    bc‚ÇÇ_label = "fixed-uj"
    bc‚ÇÉ_label = "fixed-uk"
    bc‚ÇÑ_label = "pressure"
    bc‚ÇÅ = FixedDofBoundaryCondition([:u], [1], bc‚ÇÅ_label)
    bc‚ÇÇ = FixedDofBoundaryCondition([:u], [2], bc‚ÇÇ_label)
    bc‚ÇÉ = FixedDofBoundaryCondition([:u], [3], bc‚ÇÉ_label)
    # Neumann boundary conditions 
    bc‚ÇÑ = LocalPressureBoundaryCondition([:u], t -> p(t), bc‚ÇÑ_label)
    boundary_conditions = StructuralBoundaryConditions(bc‚ÇÅ, bc‚ÇÇ, bc‚ÇÉ, bc‚ÇÑ)
    bc_labels = [bc‚ÇÅ_label, bc‚ÇÇ_label, bc‚ÇÉ_label, bc‚ÇÑ_label]
    # -------------------------------
    # Entities
    # -------------------------------
    # Entities types without assigned nodes, faces and elements
    faces_label = "triangle"
    elements_label = "tetrahedron"
    vfaces = [TriangularFace(faces_label)]
    velems = [Tetrahedron(elements_label)]
    entities = StructuralEntities(velems, vfaces)
    entities_labels = [faces_label, elements_label]
    # -------------------------------
    # Mesh
    # -------------------------------
    msh_path = joinpath(@__DIR__, "cylinder.msh")
    msh_mesh = MshFile(msh_path)
    # -------------------------------
    # Structure
    # -------------------------------
    structure = Structure(msh_mesh, materials, boundary_conditions, entities)
end;
# -------------------------------
# Structure
# -------------------------------
reset_timer!()
# -------------------------------
# Materials
# -------------------------------
mat_label = "mat";
linear_material = IsotropicLinearElastic(E, ŒΩ, mat_label);
@timeit "Building the linear structure ‚ö™ " begin
    linear_cylinder = cylinder_structure(linear_material, L‚Çñ, R·µ¢, R‚Çë, pressure)
end
svk_material = SVK(E=E, ŒΩ=ŒΩ, label=mat_label);
@timeit "Building the non-linear structure üîò" begin
    nonlinear_cylinder = cylinder_structure(svk_material, L‚Çñ, R·µ¢, R‚Çë, pressure)
end
# -------------------------------
# Structural Analysis
# -------------------------------
"Defines an structural `AbstractStaticAnalysis`."
static_analysis(structure::Structure, analysis::Type{<:AbstractStaticAnalysis}; NSTEPS::Int) =
    analysis(structure, NSTEPS=NSTEPS);
# -----------------------------------------------
# Case 1 - Static linear elastic case
#------------------------------------------------
@timeit "Defining the linear analysis üë∑ üîé ‚ö™" begin
    linear_analysis = static_analysis(linear_cylinder, LinearStaticAnalysis, NSTEPS=NSTEPS)
end
# -----------------------------------------------
# Case 2 - Static non-linear elastic case
#----------------------------------------------
@timeit "Defining the non-linear analysis üë≤ üîé üîò" begin
    nonlinear_analysis = static_analysis(nonlinear_cylinder, NonLinearStaticAnalysis, NSTEPS=NSTEPS)
end
# -------------------------------
# Numerical solution
# -------------------------------
# Linear analysis
# -------------------------------
@timeit "Solving the linear analysis üê¢->üêï" begin
    states_lin_sol = solve!(linear_analysis)
end
# get time vector or load factors  
Œª·µ• = load_factors(linear_analysis)
# Get the solution at a random point 
"Return a rand point in the cylinder (R, Œ∏, L)."
rand_point_cylinder(R·µ¢::Real=R·µ¢, R‚Çë::Real=R‚Çë, L‚Çñ::Real=L‚Çñ) =
    [rand() * (R‚Çë - R·µ¢) + R·µ¢, rand() * 2 * œÄ, rand() * L‚Çñ]
# Get the internal radial displacement at p = (0, R·µ¢, 0)
linear_cylinder_mesh = mesh(linear_cylinder)
n·µ¢ = nodes(linear_cylinder_mesh)[4];
u·µ£_numeric_n·µ¢ = displacements(states_lin_sol, n·µ¢, 2);
# Get the external radial displacement at p = (-R‚Çë, 0, L‚Çñ)
n‚Çë = nodes(linear_cylinder_mesh)[15];
u·µ£_numeric_n‚Çë = displacements(states_lin_sol, n‚Çë, 1);
# Generate a random point
rand_R, rand_Œ∏, rand_z = rand_point_cylinder();
# rand_R = R·µ¢;
# rand_Œ∏ = 0.0
p_rand = SVector(rand_R * cos(rand_Œ∏), rand_R * sin(rand_Œ∏), rand_z);
# Displacements at p
point_evaluator = PointEvalHandler(linear_cylinder_mesh, p_rand);
u·µ¢_numeric_p_rand = displacements(states_lin_sol, point_evaluator, 1);
u‚±º_numeric_p_rand = displacements(states_lin_sol, point_evaluator, 2);
u‚Çñ_numeric_p_rand = displacements(states_lin_sol, point_evaluator, 3);
# 
u·µ£_numeric_p_rand = sqrt.(@. u·µ¢_numeric_p_rand^2 + u‚±º_numeric_p_rand^2);
#  Non-linear analysis
# -------------------------------
tols = ConvergenceSettings(rel_U_tol=1e-8, rel_res_force_tol=1e-8, max_iter=30)
alg = NewtonRaphson(tols)
@timeit "Solving the non-linear analysis üê¢->üêï" begin
    states_nonlinear_sol = solve!(nonlinear_analysis, alg)
end
# Get the internal radial displacement at p = (0, R·µ¢, 0)
u·µ£_numeric_nonlinear_n·µ¢ = displacements(states_nonlinear_sol, n·µ¢, 2);
# Get the external radial displacement at p = (-R‚Çë, 0, L‚Çñ)
u·µ£_numeric_nonlinear_n‚Çë = displacements(states_nonlinear_sol, n‚Çë, 1);
# -------------------------------
# Analytic solution
# -------------------------------
t = last(Œª·µ•)
"Analytic radial displacements u·µ£ at radius`r` and time `t`."
function u·µ£(
    r::Real, t::Real,
    E::Real=E, ŒΩ::Real=ŒΩ, p::Function=pressure,
    R·µ¢::Real=R·µ¢, R‚Çë::Real=R‚Çë,
)
    "Constant A for the analytic solution."
    A(t::Real, R·µ¢::Real, R‚Çë::Real, E::Real, ŒΩ::Real, p::Function) =
        (1 + ŒΩ) * (1 - 2 * ŒΩ) * R·µ¢^2 * -p(t) / (E * (R‚Çë^2 - R·µ¢^2))
    "Constant B for the analytic solution."
    B(t::Real, R·µ¢::Real, R‚Çë::Real, E::Real, ŒΩ::Real, p::Function) =
        (1 + ŒΩ) * R·µ¢^2 * R‚Çë^2 * -p(t) / (E * (R‚Çë^2 - R·µ¢^2))
    u·µ£ = A(t, R·µ¢, R‚Çë, E, ŒΩ, p) * r + B(t, R·µ¢, R‚Çë, E, ŒΩ, p) / r
end;
u·µ£_analytic_n·µ¢ = [u·µ£(R·µ¢, t) for t in Œª·µ•];
u·µ£_analytic_n‚Çë = [u·µ£(R‚Çë, t) for t in Œª·µ•];
u·µ£_analytic_p_rand = [u·µ£(rand_R, t) for t in Œª·µ•];
#-----------------------------
# Print & plots 
#-----------------------------
print_timer(title="Analysis with $(out_gmsh[:nelems]) elements and $(out_gmsh[:nnodes]) nodes")
if plot_results
    using Plots
    vec_p = [-pressure(Œª) for Œª in Œª·µ•]
    vec_p_non_in = [-pressure(Œª) for Œª in load_factors(nonlinear_analysis)]
    fig = plot(
        vec_p, u·µ£_numeric_n·µ¢, label="numeric linear u·µ£ n=(0, R·µ¢, 0)",
        legend=:topleft, color=:orange, lw=2, ls=:dash, markershape=:circle,
    )
    plot!(fig,
        vec_p, -u·µ£_numeric_n‚Çë, label="numeric linear u·µ£ n=(-R‚Çë, 0 , L‚Çñ)",
        legend=:topleft, color=:skyblue, lw=2, ls=:solid, markershape=:square,
    )
    plot!(fig,
        vec_p, u·µ£_analytic_n·µ¢, label="analytic linear u·µ£(R·µ¢)",
        legend=:topleft, color=:black, lw=2, ls=:dash, markershape=:none,
    )
    plot!(fig,
        vec_p, u·µ£_analytic_n‚Çë, label="analytic linear u·µ£(R‚Çë)",
        legend=:topleft, color=:black, lw=2, ls=:solid
    )
    # Plot comparing linear and non linear solutions 
    plot!(fig,
        vec_p_non_in, u·µ£_numeric_nonlinear_n·µ¢, label="non-linear u·µ£(0, R·µ¢, 0)",
        color=:red, lw=2, marker=:circle, markersize=3
    )
    plot!(fig,
        vec_p_non_in, -u·µ£_numeric_nonlinear_n‚Çë, label="non-linear u·µ£(-R‚Çë, 0 , L‚Çñ)",
        color=:blue, lw=2, marker=:circle, markersize=3
    )
    # add labels
    xlabel!("Œª·µ• [MPa]")
    ylabel!("u·µ£ [mm]")
    display(fig)
end
#-----------------------------
# Test booleans
#-----------------------------
# Test symmetry and boundary conditions for a random slice
#-------------------------------------------
function test_solution_at_slice(
    sol::AbstractSolution=states_lin_sol;
    atol::Real=ATOL, atolr=ATOLR,
    R·µ¢::Real=R·µ¢, R‚Çë::Real=R‚Çë, L‚Çñ::Real=L‚Çñ
)
    structure = ONSAS.structure(analysis(sol))
    # Generic surface s at z = L‚Çñ 
    rand_R, rand_Œ∏‚ÇÅ, L‚Çñ = rand_point_cylinder(R·µ¢, R‚Çë, L‚Çñ)
    # Set by force L‚Çñ
    rand_Œ∏‚ÇÇ = rand() * 2 * œÄ
    # Random point ‚àà axis x
    p_rand·µ¢ = [rand_R, 0.0, L‚Çñ]
    # Random point ‚àà axis y
    p_rand‚±º = [0.0, rand_R, L‚Çñ]
    # Random point between the internal and external surface
    p_rand‚ÇÅ = [rand_R * cos(rand_Œ∏‚ÇÅ), rand_R * sin(rand_Œ∏‚ÇÅ), L‚Çñ]
    p_rand‚ÇÇ = [rand_R * cos(rand_Œ∏‚ÇÇ), rand_R * sin(rand_Œ∏‚ÇÇ), L‚Çñ]
    # Vector of points to test
    vec_points = [p_rand·µ¢, p_rand‚±º, p_rand‚ÇÅ, p_rand‚ÇÇ]
    #
    point_evaluator = PointEvalHandler(mesh(structure), vec_points)
    U = displacements(sol, point_evaluator)
    # Check u‚Çñ = 0 ‚àÄ p ‚àà s
    zero_u‚Çñ = all([‚âà(norm(u[3]), 0.0, atol=atol) for u in U])
    # Check u·µ¢ = 0 ‚àÄ p ‚àà s & ‚àà axis y
    U·µ¢_in_axis_y = displacements(states_lin_sol, point_evaluator, 2)[1]
    zero_u‚Çñ_axis_y = all([‚âà(norm(u·µ¢_p_in_axis_y), 0.0, atol=atol) for u·µ¢_p_in_axis_y in U·µ¢_in_axis_y])
    # Check u‚±º = 0 ‚àÄ p ‚àà s & ‚àà axis x
    U‚±º_in_axis_x = displacements(states_lin_sol, point_evaluator, 1)[2]
    zero_u‚±º_axis_x = all([‚âà(norm(u‚±º_p_in_axis_y), 0.0, atol=atol) for u‚±º_p_in_axis_y in U‚±º_in_axis_x])
    # Check u·µ£(r,Œ∏‚ÇÅ) =  u·µ£(r,Œ∏‚ÇÅ)  at last time
    rand‚ÇÅ_index = 3
    u·µ£_rand‚ÇÅ = sum(last.(U[rand‚ÇÅ_index][1:2]) .^ 2)
    rand‚ÇÇ_index = 4
    u·µ£_rand‚ÇÇ = sum(last.(U[rand‚ÇÇ_index][1:2]) .^ 2)
    u·µ£_not_depends_on_Œ∏ = ‚âà(u·µ£_rand‚ÇÅ, u·µ£_rand‚ÇÇ, atol=atolr)
    return u·µ£_not_depends_on_Œ∏, zero_u‚Çñ, zero_u‚Çñ_axis_y, zero_u‚±º_axis_x
end;
# Test simmetry and boundary conditions
u·µ£_not_depends_on_Œ∏, zero_u‚Çñ, zero_u‚Çñ_axis_y, zero_u‚±º_axis_x =
    test_solution_at_slice(states_lin_sol, atol=ATOL, atolr=10 * ATOL)
@testset "Case 1: Linear Analysis " begin
    @info "u·µ£(r,Œ∏‚ÇÅ,L‚ÇÅ) = u·µ£(r,Œ∏‚ÇÇ,L‚ÇÇ)?" u·µ£_not_depends_on_Œ∏
    @test zero_u‚Çñ
    @test zero_u‚Çñ_axis_y
    @test zero_u‚±º_axis_x
    @test u·µ£_numeric_p_rand ‚âà u·µ£_analytic_p_rand atol = ATOL
    @test u·µ£_analytic_n·µ¢ ‚âà u·µ£_numeric_n·µ¢ atol = ATOL
    @test u·µ£_analytic_n‚Çë ‚âà -u·µ£_numeric_n‚Çë atol = ATOL
end
# Test simmetry and boundary conditions
u·µ£_not_depends_on_Œ∏_case2, zero_u‚Çñ_case2, zero_u‚Çñ_axis_y_case2, zero_u‚±º_axis_x_case2 =
    test_solution_at_slice(states_lin_sol, atol=ATOL, atolr=10 * ATOL)
@testset "Case 2: Non-Linear Analysis " begin
    @info "u·µ£(r,Œ∏‚ÇÅ,L‚ÇÅ) = u·µ£(r,Œ∏‚ÇÇ,L‚ÇÇ)?" u·µ£_not_depends_on_Œ∏_case2
    @test zero_u‚Çñ_case2
    @test zero_u‚Çñ_axis_y_case2
    @test zero_u‚±º_axis_x_case2
end

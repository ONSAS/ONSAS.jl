# --------------------------------------------------
# Cylinder submitted to an Internal Pressure Example  
#----------------------------------------------------
using LinearAlgebra: norm
using ONSAS
using Test: @test, @testset

## scalar parameters (dimensions in mm an MPa)
L = 75; # cylinder length in ùêû‚Çñ mm
R·µ¢ = 100; # inner radius in mm
R‚Çë = 200; # outer radius in mm
p = 1e-1; # internal pressure in MPa
E = 210;  # Young modulus in MPa
ŒΩ = 0.3;  # Poisson ratio

# Run gmsh to generate the mesh
command = `gmsh -3 examples/cylinder_internal_pressure/cylinder.geo`;
run(command);

"Builds the `Structure`."
function cylinder_structure(E::Real, ŒΩ::Real, p::Real, L::Real, R·µ¢::Real, R‚Çë::Real)
    # -------------------------------
    # Materials
    # -------------------------------
    mat_label = "mat"
    material = IsotropicLinearElastic(E, ŒΩ, mat_label)
    materials = StructuralMaterials(material)
    # -------------------------------
    # Boundary conditions
    # -------------------------------
    # Dirichlet boundary conditions 
    bc‚ÇÅ_label = "fixed-ui"
    bc‚ÇÇ_label = "fixed-uj"
    bc‚ÇÉ_label = "fixed-uk"
    bc‚ÇÑ_label = "pressure"
    bc‚ÇÅ = FixedDofBoundaryCondition([:u], [1], bc‚ÇÅ_label)
    bc‚ÇÇ = FixedDofBoundaryCondition([:u], [2], bc‚ÇÇ_label)
    bc‚ÇÉ = FixedDofBoundaryCondition([:u], [3], bc‚ÇÉ_label)
    # Neumann boundary conditions 
    bc‚ÇÑ = LocalPressureBoundaryCondition([:u], t -> [p * t], bc‚ÇÑ_label)
    boundary_conditions = StructuralBoundaryConditions(bc‚ÇÅ, bc‚ÇÇ, bc‚ÇÉ, bc‚ÇÑ)
    bc_labels = [bc‚ÇÅ_label, bc‚ÇÇ_label, bc‚ÇÉ_label, bc‚ÇÑ_label]
    # -------------------------------
    # Entities
    # -------------------------------
    # Entities types without assigned nodes, faces and elements
    faces_label = "triangle"
    elements_label = "tetrahedron"
    vfaces = [TriangularFace(faces_label)]
    velems = [Tetrahedron(elements_label)]
    entities = StructuralEntities(velems, vfaces)
    entities_labels = [faces_label, elements_label]
    # -------------------------------
    # Mesh
    # -------------------------------
    msh_path = joinpath(@__DIR__, "cylinder.msh")
    msh_mesh = MshFile(msh_path)
    # -------------------------------
    # Structure
    # -------------------------------
    structure = Structure(msh_mesh, materials, boundary_conditions, entities)
end;
# -------------------------------
# Structure
# -------------------------------
structure = cylinder_structure(E, ŒΩ, p, L, R·µ¢, R‚Çë);
# -------------------------------
# Structural Analysis
# -------------------------------
"Defines an structural `AbstractStaticAnalysis`."
function static_analysis(
    structure::Structure, analysis::Type{<:AbstractStaticAnalysis};
    NSTEPS::Int
)
    analysis(structure, NSTEPS=NSTEPS)
end;
linear_analysis = static_analysis(structure, LinearStaticAnalysis, NSTEPS=2);
# -------------------------------
# Numerical solution
# -------------------------------
states_lin_sol = solve!(linear_analysis);
# Select a face to test the boundary conditions 
"Tests boundary conditions and symmetry for a slice at x = L·µ¢."
function test_slice(L·µ¢::Real; atol::Real=ATOL)
    # Generic surface s at x = L·µ¢ 
    rand_R = rand() * (R‚Çë - R·µ¢) + R·µ¢
    rand_Œ∏ = rand() * 2 * œÄ
    # Random point ‚àà axis x
    prand·µ¢ = [rand_R, 0.0, L·µ¢]
    # Random point ‚àà axis y
    prand‚±º = [0.0, rand_R, L·µ¢]
    # Random point between the internal and external surface
    prand = [rand_R * cos(rand_Œ∏), rand_R * sin(rand_Œ∏), L·µ¢]
    # Vector of points to test
    vec_points = [prand·µ¢, prand‚±º, prand]
    #
    point_evaluator = PointEvalHandler(mesh(structure), vec_points)
    displacements_s = displacements(states_lin_sol, point_evaluator)
    # Check u‚Çñ = 0 ‚àÄ p ‚àà s
    @test all([‚âà(norm(displacements_p[3]), 0.0, atol=atol) for displacements_p in displacements_s])
    # Check u·µ¢ = 0 ‚àÄ p ‚àà s & ‚àà axis y
    displacements_axis_y_u·µ¢ = displacements(states_lin_sol, point_evaluator, 1)[1]
    @test all([‚âà(norm(displacements_p_axis_y_u·µ¢), 0.0, atol=atol) for displacements_p_axis_y_u·µ¢ in displacements_axis_y_u·µ¢])
    # Check u‚±º = 0 ‚àÄ p ‚àà s & ‚àà axis x
    displacements_axis_y_u‚±º = displacements(states_lin_sol, point_evaluator, 2)[2]
    @test all([‚âà(norm(displacements_p_axis_y_u‚±º), 0.0, atol=atol) for displacements_p_axis_y_u‚±º in displacements_axis_y_u‚±º])
end
test_slice(L / 2, atol=ATOL)


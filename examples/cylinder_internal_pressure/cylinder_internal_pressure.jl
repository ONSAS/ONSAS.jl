# --------------------------------------------------
# Cylinder submitted to an Internal Pressure Example  
#----------------------------------------------------
using LinearAlgebra: norm
using ONSAS
using StaticArrays: SVector
using Test: @test, @testset
## scalar parameters (dimensions in mm an MPa)
L = 30; # cylinder length in ùêû‚Çñ mm
R·µ¢ = 100; # inner radius in mm
R‚Çë = 200; # outer radius in mm
p = 10; # internal pressure in MPa
pressure(t::Real) = -p * t
E = 210.0;  # Young modulus in MPa
ŒΩ = 0.3;  # Poisson ratio


## tolerances for testing
ATOL = (R‚Çë - R·µ¢) / 100

# Run gmsh to generate the mesh
command = `gmsh -3 examples/cylinder_internal_pressure/cylinder.geo`;
run(command);

"Builds the `Structure`."
function cylinder_structure(E::Real, ŒΩ::Real, L::Real, R·µ¢::Real, R‚Çë::Real, p::Function)
    # -------------------------------
    # Materials
    # -------------------------------
    mat_label = "mat"
    material = IsotropicLinearElastic(E, ŒΩ, mat_label)
    materials = StructuralMaterials(material)
    # -------------------------------
    # Boundary conditions
    # -------------------------------
    # Dirichlet boundary conditions 
    bc‚ÇÅ_label = "fixed-ui"
    bc‚ÇÇ_label = "fixed-uj"
    bc‚ÇÉ_label = "fixed-uk"
    bc‚ÇÑ_label = "pressure"
    bc‚ÇÅ = FixedDofBoundaryCondition([:u], [1], bc‚ÇÅ_label)
    bc‚ÇÇ = FixedDofBoundaryCondition([:u], [2], bc‚ÇÇ_label)
    bc‚ÇÉ = FixedDofBoundaryCondition([:u], [3], bc‚ÇÉ_label)
    # Neumann boundary conditions 
    bc‚ÇÑ = LocalPressureBoundaryCondition([:u], t -> p(t), bc‚ÇÑ_label)
    boundary_conditions = StructuralBoundaryConditions(bc‚ÇÅ, bc‚ÇÇ, bc‚ÇÉ, bc‚ÇÑ)
    bc_labels = [bc‚ÇÅ_label, bc‚ÇÇ_label, bc‚ÇÉ_label, bc‚ÇÑ_label]
    # -------------------------------
    # Entities
    # -------------------------------
    # Entities types without assigned nodes, faces and elements
    faces_label = "triangle"
    elements_label = "tetrahedron"
    vfaces = [TriangularFace(faces_label)]
    velems = [Tetrahedron(elements_label)]
    entities = StructuralEntities(velems, vfaces)
    entities_labels = [faces_label, elements_label]
    # -------------------------------
    # Mesh
    # -------------------------------
    msh_path = joinpath(@__DIR__, "cylinder.msh")
    msh_mesh = MshFile(msh_path)
    # -------------------------------
    # Structure
    # -------------------------------
    structure = Structure(msh_mesh, materials, boundary_conditions, entities)
end;
# -------------------------------
# Structure
# -------------------------------
structure = cylinder_structure(E, ŒΩ, L, R·µ¢, R‚Çë, pressure);
# -------------------------------
# Structural Analysis
# -------------------------------
"Defines an structural `AbstractStaticAnalysis`."
function static_analysis(
    structure::Structure, analysis::Type{<:AbstractStaticAnalysis};
    NSTEPS::Int
)
    analysis(structure, NSTEPS=NSTEPS)
end;
linear_analysis = static_analysis(structure, LinearStaticAnalysis, NSTEPS=2);
# -------------------------------
# Numerical solution
# -------------------------------
states_lin_sol, time, _ = @timed solve!(linear_analysis);
# 
Œª·µ• = load_factors(linear_analysis)
# Select a face to test the boundary conditions 
"Tests boundary conditions and symmetry for a slice at x = L·µ¢."
function test_bcs_slice(L·µ¢::Real; atol::Real=ATOL)
    # Generic surface s at x = L·µ¢ 
    rand_R = rand() * (R‚Çë - R·µ¢) + R·µ¢
    rand_Œ∏‚ÇÅ = rand() * 2 * œÄ
    rand_Œ∏‚ÇÇ = rand() * 2 * œÄ
    # Random point ‚àà axis x
    p_rand·µ¢ = [rand_R, 0.0, L·µ¢]
    # Random point ‚àà axis y
    p_rand‚±º = [0.0, rand_R, L·µ¢]
    # Random point between the internal and external surface
    p_rand‚ÇÅ = [rand_R * cos(rand_Œ∏‚ÇÅ), rand_R * sin(rand_Œ∏‚ÇÅ), L·µ¢]
    p_rand‚ÇÇ = [rand_R * cos(rand_Œ∏‚ÇÇ), rand_R * sin(rand_Œ∏‚ÇÇ), L·µ¢]
    # Vector of points to test
    vec_points = [p_rand·µ¢, p_rand‚±º, p_rand‚ÇÅ, p_rand‚ÇÇ]
    #
    point_evaluator = PointEvalHandler(mesh(structure), vec_points)
    U = displacements(states_lin_sol, point_evaluator)
    # Check u‚Çñ = 0 ‚àÄ p ‚àà s
    @test all([‚âà(norm(u[3]), 0.0, atol=atol) for u in U])
    # Check u·µ¢ = 0 ‚àÄ p ‚àà s & ‚àà axis y
    U·µ¢_in_axis_y = displacements(states_lin_sol, point_evaluator, 2)[1]
    @test all([‚âà(norm(u·µ¢_p_in_axis_y), 0.0, atol=atol) for u·µ¢_p_in_axis_y in U·µ¢_in_axis_y])
    # Check u‚±º = 0 ‚àÄ p ‚àà s & ‚àà axis x
    U‚±º_in_axis_x = displacements(states_lin_sol, point_evaluator, 1)[2]
    @test all([‚âà(norm(u‚±º_p_in_axis_y), 0.0, atol=atol) for u‚±º_p_in_axis_y in U‚±º_in_axis_x])
    # Check u·µ£(r,Œ∏‚ÇÅ) =  u·µ£(r,Œ∏‚ÇÅ)  at last time
    rand‚ÇÅ_index = 3
    @show u·µ£_rand‚ÇÅ = sum(last.(U[rand‚ÇÅ_index][1:2]) .^ 2)
    rand‚ÇÇ_index = 4
    @show u·µ£_rand‚ÇÇ = sum(last.(U[rand‚ÇÇ_index][1:2]) .^ 2)
end;
# Rand slice z coordiante
L‚Çñ = L / (1 + rand());
test_bcs_slice(L‚Çñ, atol=ATOL)

@info "The execution time was $(time) seconds üîß."
# Displacements at internal and external nodes 
n·µ¢ = nodes(mesh(structure))[1]
@show u·µ£·µ¢_numeric = last(displacements(states_lin_sol, n·µ¢, 1))
n‚Çë = nodes(mesh(structure))[8]
@show u·µ£‚Çë_numeric = last(displacements(states_lin_sol, n‚Çë, 2))
# Displacements at a random point 
rand_R = rand() * (R‚Çë - R·µ¢) + R·µ¢;
rand_Œ∏ = rand() * 2 * œÄ;
p_rand = SVector(rand_R * cos(rand_Œ∏), rand_R * sin(rand_Œ∏), L‚Çñ);
point_evaluator = PointEvalHandler(mesh(structure), p_rand);
u·µ¢_p_rand = displacements(states_lin_sol, point_evaluator, 1);
u‚±º_p_rand = displacements(states_lin_sol, point_evaluator, 2);
u‚Çñ_p_rand = displacements(states_lin_sol, point_evaluator, 3);
u·µ£_p_rand = @. u·µ¢_p_rand^2 + u‚±º_p_rand^2
# -------------------------------
# Analytic solution
# -------------------------------
t = last(Œª·µ•)
A(t, R·µ¢, R‚Çë, E, ŒΩ) = (1 + ŒΩ) * (1 - 2 * ŒΩ) * R·µ¢^2 * -pressure(t) / (E * (R‚Çë^2 - R·µ¢^2))
Avalue = A(t, R·µ¢, R‚Çë, E, ŒΩ)
B(t, R·µ¢, R‚Çë, E, ŒΩ) = (1 + ŒΩ) * R·µ¢^2 * R‚Çë^2 * -pressure(t) / (E * (R‚Çë^2 - R·µ¢^2))
Bvalue = B(t, R·µ¢, R‚Çë, E, ŒΩ)
@show u·µ£·µ¢_analytic = Avalue * R·µ¢ + Bvalue / R·µ¢
@show u·µ£‚Çë_analytic = Avalue * R‚Çë + Bvalue / R‚Çë
nothing

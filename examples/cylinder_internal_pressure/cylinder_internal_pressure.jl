# --------------------------------------------------
# Cylinder submitted to an Internal Pressure Example
#----------------------------------------------------
using LinearAlgebra, Test, Suppressor
using ONSAS

# Mesh with Gmsh.jl
include("cylinder_mesh.jl")

"Runs the cylinder with internal pressure example."
function run_cylinder_internal_pressure_example()
    ## scalar parameters (dimensions in mm an MPa)
    L‚Çñ = 30 # cylinder length in ùêû‚Çñ mm
    R·µ¢ = 100 # inner radius in mm
    R‚Çë = 200 # outer radius in mm
    p = 10 # internal pressure in MPa
    E = 210.0  # Young modulus in MPa
    ŒΩ = 0.3  # Poisson ratio
    pressure(t::Real) = p * t
    ## number of steps
    NSTEPS = 9
    ## tolerances for testing
    ATOL = 1e-2 * (R‚Çë - R·µ¢)
    ## Plot results
    PLOT_RESULTS = false
    ## Refinement mesh factor
    ms = 0.8 # ms = 2.5 for a Heavy one
    # -------------------------------
    # Structure
    # -------------------------------
    "Builds the `Structure`."
    function cylinder_structure(material::AbstractMaterial,
                                L‚Çñ::Real, R·µ¢::Real, R‚Çë::Real,
                                pressure::Function; ms::Real)
        # -------------------------------
        # Physical entities labels
        # -------------------------------
        # material
        mat_label = label(material)
        # entities
        node_label = "node"
        faces_label = "triangle"
        elements_label = "tetrahedron"
        entities_labels = [node_label, faces_label, elements_label]
        # boundary conditions
        bc‚ÇÅ_label = "fixed-ui"
        bc‚ÇÇ_label = "fixed-uj"
        bc‚ÇÉ_label = "fixed-uk"
        bc‚ÇÑ_label = "pressure"
        bc_labels = [bc‚ÇÅ_label, bc‚ÇÇ_label, bc‚ÇÉ_label, bc‚ÇÑ_label]
        # mesh labels
        labels = [mat_label, entities_labels, bc_labels]
        # -------------------------------
        # Entities
        # -------------------------------
        # Entities types without assigned nodes, faces and elements
        vfaces = [TriangularFace(faces_label)]
        velems = [Tetrahedron(elements_label)]
        entities = StructuralEntity(velems, vfaces)
        # -------------------------------
        # Mesh
        # -------------------------------
        filename = "cylinder"
        local msh_path
        out = @capture_out begin
            msh_path = create_cylinder_mesh(R·µ¢, R‚Çë, L‚Çñ, labels, filename, ms)
        end
        gmsh_println(out)
        msh_mesh = MshFile(msh_path)
        mesh = Mesh(msh_mesh, entities)
        # Dofs
        #--------------------------------
        dof_dim = 3
        dof_u_symbol = :u
        set_dofs!(mesh, dof_u_symbol, dof_dim)
        # -------------------------------
        # Boundary conditions
        # -------------------------------
        # Dirichlet boundary conditions
        bc‚ÇÅ = FixedDof(:u, [1], bc‚ÇÅ_label)
        bc‚ÇÇ = FixedDof(:u, [2], bc‚ÇÇ_label)
        bc‚ÇÉ = FixedDof(:u, [3], bc‚ÇÉ_label)
        # Neumann boundary conditions
        bc‚ÇÑ = Pressure(:u, pressure, bc‚ÇÑ_label)
        boundary_conditions = StructuralBoundaryCondition(bc‚ÇÅ, bc‚ÇÇ, bc‚ÇÉ, bc‚ÇÑ)
        # Assign boundary conditions to the ones defined in the mesh
        apply!(boundary_conditions, mesh)
        # -------------------------------
        # Materials
        # -------------------------------
        materials = StructuralMaterial(material)
        apply!(materials, mesh)
        # -------------------------------
        # Structure
        # -------------------------------
        Structure(mesh, materials, boundary_conditions)
    end
    # -------------------------------
    # Materials
    # -------------------------------
    mat_label = "mat"
    linear_material = IsotropicLinearElastic(E, ŒΩ, mat_label)
    cylinder = cylinder_structure(linear_material, L‚Çñ, R·µ¢, R‚Çë, pressure; ms=ms)
    # -------------------------------
    # Structural Analysis
    # -------------------------------
    "Defines an structural `AbstractStaticAnalysis`."
    function static_analysis(structure::Structure,
                             analysis::Type{<:AbstractStaticAnalysis};
                             NSTEPS::Int)
        analysis(structure; NSTEPS=NSTEPS)
    end
    # -----------------------------------------------
    # Case 1 - Static linear elastic case
    #------------------------------------------------
    linear_analysis = static_analysis(cylinder, LinearStaticAnalysis; NSTEPS=NSTEPS)
    # -------------------------------
    # Numerical solution
    # -------------------------------
    states_lin_sol = solve!(linear_analysis)
    # get time vector or load factors
    Œª·µ• = load_factors(linear_analysis)
    # Get the solution at a random point
    "Return a rand point in the cylinder (R, Œ∏, L)."
    function rand_point_cylinder(R·µ¢::Real=R·µ¢, R‚Çë::Real=R‚Çë, L‚Çñ::Real=L‚Çñ)
        [rand() * (R‚Çë - R·µ¢) + R·µ¢, rand() * 2 * œÄ, rand() * L‚Çñ]
    end
    # Get the internal radial displacement at p = (0, R·µ¢, 0)
    cylinder_mesh = mesh(cylinder)
    n·µ¢ = nodes(cylinder_mesh)[4]
    u·µ£_numeric_n·µ¢ = displacements(states_lin_sol, n·µ¢, 2)
    # Get the external radial displacement at p = (-R‚Çë, 0, L‚Çñ)
    n‚Çë = nodes(cylinder_mesh)[15]
    u·µ£_numeric_n‚Çë = displacements(states_lin_sol, n‚Çë, 1)
    # Generate a random point
    rand_R, rand_Œ∏, rand_z = rand_point_cylinder()
    # rand_R = R·µ¢;
    # rand_Œ∏ = 0.0
    p_rand = Point(rand_R * cos(rand_Œ∏), rand_R * sin(rand_Œ∏), rand_z)
    # Displacements at p
    point_evaluator = PointEvalHandler(cylinder_mesh, p_rand)
    u·µ¢_numeric_p_rand = displacements(states_lin_sol, point_evaluator, 1)
    u‚±º_numeric_p_rand = displacements(states_lin_sol, point_evaluator, 2)
    u‚Çñ_numeric_p_rand = displacements(states_lin_sol, point_evaluator, 3)
    #
    u·µ£_numeric_p_rand = sqrt.(@. u·µ¢_numeric_p_rand^2 + u‚±º_numeric_p_rand^2)
    # -------------------------------
    # Analytic solution
    # -------------------------------
    "Analytic radial displacements u·µ£ at radius`r` and time `t`."
    function u·µ£(r::Real, t::Real,
                E::Real=E, ŒΩ::Real=ŒΩ, p::Function=pressure,
                R·µ¢::Real=R·µ¢, R‚Çë::Real=R‚Çë)
        "Constant A for the analytic solution."
        function A(t::Real, R·µ¢::Real, R‚Çë::Real, E::Real, ŒΩ::Real, p::Function)
            (1 + ŒΩ) * (1 - 2 * ŒΩ) * R·µ¢^2 * p(t) / (E * (R‚Çë^2 - R·µ¢^2))
        end
        "Constant B for the analytic solution."
        function B(t::Real, R·µ¢::Real, R‚Çë::Real, E::Real, ŒΩ::Real, p::Function)
            (1 + ŒΩ) * R·µ¢^2 * R‚Çë^2 * p(t) / (E * (R‚Çë^2 - R·µ¢^2))
        end
        A(t, R·µ¢, R‚Çë, E, ŒΩ, p) * r + B(t, R·µ¢, R‚Çë, E, ŒΩ, p) / r
    end
    u·µ£_analytic_n·µ¢ = [u·µ£(R·µ¢, Œª·µ¢) for Œª·µ¢ in Œª·µ•]
    u·µ£_analytic_n‚Çë = [u·µ£(R‚Çë, Œª·µ¢) for Œª·µ¢ in Œª·µ•]
    u·µ£_analytic_p_rand = [u·µ£(rand_R, Œª·µ¢) for Œª·µ¢ in Œª·µ•]
    #-----------------------------
    # Test booleans - Case 1
    #-----------------------------
    # Test symmetry and boundary conditions for a random slice
    #-------------------------------------------
    function test_solution_at_slice(sol::AbstractSolution=states_lin_sol;
                                    atol::Real=ATOL, atolr=ATOLR,
                                    R·µ¢::Real=R·µ¢, R‚Çë::Real=R‚Çë, L‚Çñ::Real=L‚Çñ)
        structure = ONSAS.structure(analysis(sol))
        # Generic surface s at z = L‚Çñ
        rand_R, rand_Œ∏‚ÇÅ, L‚Çñ = rand_point_cylinder(R·µ¢, R‚Çë, L‚Çñ)
        # Set by force L‚Çñ
        rand_Œ∏‚ÇÇ = rand() * 2 * œÄ
        # Random point ‚àà axis x
        p_rand_in_axis_x = [rand_R, 0.0, L‚Çñ]
        # Random point ‚àà axis y
        p_rand_in_axis_y = [0.0, rand_R, L‚Çñ]
        # Random point between the internal and external surface
        p_rand‚ÇÅ = [rand_R * cos(rand_Œ∏‚ÇÅ), rand_R * sin(rand_Œ∏‚ÇÅ), L‚Çñ]
        p_rand‚ÇÇ = [rand_R * cos(rand_Œ∏‚ÇÇ), rand_R * sin(rand_Œ∏‚ÇÇ), L‚Çñ]
        # Vector of points to test
        vec_points = [p_rand_in_axis_x, p_rand_in_axis_y, p_rand‚ÇÅ, p_rand‚ÇÇ]
        #
        point_evaluator = PointEvalHandler(mesh(structure), vec_points)
        U = displacements(sol, point_evaluator)
        # Check u‚Çñ = 0 ‚àÄ p ‚àà s
        zero_u‚Çñ = all([‚âà(norm(u[3]), 0.0; atol=atol) for u in U])
        # Check u·µ¢ = 0 ‚àÄ p ‚àà s & ‚àà axis y
        index_p_rand_in_axis_y = findall([p == p_rand_in_axis_y for p in vec_points])
        U·µ¢_in_axis_y = getindex(displacements(sol, point_evaluator, 1), index_p_rand_in_axis_y)
        zero_u·µ¢_axis_y = all([‚âà(norm(u·µ¢_p_in_axis_y), 0.0; atol=atol)
                              for u·µ¢_p_in_axis_y in U·µ¢_in_axis_y])
        # Check u‚±º = 0 ‚àÄ p ‚àà s & ‚àà axis x
        index_p_rand_in_axis_x = findall([p == p_rand_in_axis_x for p in vec_points])
        U‚±º_in_axis_x = getindex(displacements(sol, point_evaluator, 2), index_p_rand_in_axis_x)
        zero_u‚±º_axis_x = all([‚âà(norm(u‚±º_p_in_axis_y), 0.0; atol=atol)
                              for u‚±º_p_in_axis_y in U‚±º_in_axis_x])
        # Check u·µ£(r,Œ∏‚ÇÅ) =  u·µ£(r,Œ∏‚ÇÅ)  at last time
        rand‚ÇÅ_index = 3
        u·µ£_rand‚ÇÅ = sum(last.(U[rand‚ÇÅ_index][1:2]) .^ 2)
        rand‚ÇÇ_index = 4
        u·µ£_rand‚ÇÇ = sum(last.(U[rand‚ÇÇ_index][1:2]) .^ 2)
        u·µ£_not_depends_on_Œ∏ = ‚âà(u·µ£_rand‚ÇÅ, u·µ£_rand‚ÇÇ; atol=atolr)

        u·µ£_not_depends_on_Œ∏, zero_u‚Çñ, zero_u·µ¢_axis_y, zero_u‚±º_axis_x
    end
    # Test symmetry and boundary conditions
    test_bools_symmetry_linear = test_solution_at_slice(states_lin_sol; atol=ATOL, atolr=10 * ATOL)
    u·µ£_not_depends_on_Œ∏_linear, zero_u‚Çñ_linear, zero_u·µ¢_axis_y_linear, zero_u‚±º_axis_x_linear = test_bools_symmetry_linear
    # -----------------------------------------------
    # Case 2 - Static non-linear elastic case
    #----------------------------------------------
    svk_material = Svk(; E=E, ŒΩ=ŒΩ, label=mat_label)
    replace!(cylinder, svk_material)
    nonlinear_analysis = static_analysis(cylinder, NonLinearStaticAnalysis; NSTEPS=NSTEPS)
    #  Non-linear analysis
    # -------------------------------
    tols = ConvergenceSettings(; rel_U_tol=1e-8, rel_res_force_tol=1e-8, max_iter=30)
    alg = NewtonRaphson(tols)
    states_nonlinear_sol = solve!(nonlinear_analysis, alg)
    # Get the internal radial displacement at p = (0, R·µ¢, 0)
    u·µ£_numeric_nonlinear_n·µ¢ = displacements(states_nonlinear_sol, n·µ¢, 2)
    # Get the external radial displacement at p = (-R‚Çë, 0, L‚Çñ)
    u·µ£_numeric_nonlinear_n‚Çë = displacements(states_nonlinear_sol, n‚Çë, 1)
    # Test symmetry and boundary conditions
    test_silce_bools = test_solution_at_slice(states_nonlinear_sol; atol=ATOL, atolr=10 * ATOL)
    u·µ£_not_depends_on_Œ∏_nonlinear, zero_u‚Çñ_case2_nonlinear, zero_u·µ¢_axis_y_nonlinear, zero_u‚±º_axis_x_nonlinear = test_silce_bools
    #-----------------------------
    # Test booleans
    #-----------------------------
    @testset "Case 1: Linear Analysis " begin
        @test u·µ£_not_depends_on_Œ∏_linear
        @test zero_u‚Çñ_linear
        @test zero_u·µ¢_axis_y_linear
        @test zero_u‚±º_axis_x_linear
        @test u·µ£_numeric_p_rand ‚âà u·µ£_analytic_p_rand atol = ATOL
        @test u·µ£_analytic_n·µ¢ ‚âà u·µ£_numeric_n·µ¢ atol = ATOL
        @test u·µ£_analytic_n‚Çë ‚âà -u·µ£_numeric_n‚Çë atol = ATOL
    end
    @testset "Case 2: Non-Linear Analysis " begin
        @test u·µ£_not_depends_on_Œ∏_nonlinear
        @test zero_u‚Çñ_case2_nonlinear
        @test zero_u·µ¢_axis_y_nonlinear
        @test zero_u‚±º_axis_x_nonlinear
    end
    #-----------------------------
    # Plot & plots
    #-----------------------------
    PLOT_RESULTS && plot_results(Œª·µ•, nonlinear_analysis, u·µ£_numeric_n·µ¢, u·µ£_numeric_n‚Çë,
                                 u·µ£_analytic_n·µ¢, u·µ£_analytic_n‚Çë)
end

"Plot cylinder with internal pressure results u·µ£ vs Œª"
function plot_results(Œª·µ•, nonlinear_analysis, u·µ£_numeric_n·µ¢, u·µ£_numeric_n‚Çë, u·µ£_analytic_n·µ¢,
                      u·µ£_analytic_n‚Çë)
    vec_p = [pressure(Œª) for Œª in Œª·µ•]
    vec_p_non_in = [pressure(Œª) for Œª in load_factors(nonlinear_analysis)]
    fig = plot(vec_p, u·µ£_numeric_n·µ¢; label="numeric linear u·µ£ n=(0, R·µ¢, 0)",
               legend=:topleft, color=:orange, lw=2, ls=:dash, markershape=:circle)
    plot!(fig,
          vec_p, -u·µ£_numeric_n‚Çë; label="numeric linear u·µ£ n=(-R‚Çë, 0 , L‚Çñ)",
          legend=:topleft, color=:skyblue, lw=2, ls=:solid, markershape=:square)
    plot!(fig,
          vec_p, u·µ£_analytic_n·µ¢; label="analytic linear u·µ£(R·µ¢)",
          legend=:topleft, color=:black, lw=2, ls=:dash, markershape=:none)
    plot!(fig,
          vec_p, u·µ£_analytic_n‚Çë; label="analytic linear u·µ£(R‚Çë)",
          legend=:topleft, color=:black, lw=2, ls=:solid)
    # Plot comparing linear and non linear solutions
    plot!(fig,
          vec_p_non_in, u·µ£_numeric_nonlinear_n·µ¢; label="non-linear u·µ£(0, R·µ¢, 0)",
          color=:red, lw=2, marker=:circle, markersize=3)
    plot!(fig,
          vec_p_non_in, -u·µ£_numeric_nonlinear_n‚Çë; label="non-linear u·µ£(-R‚Çë, 0 , L‚Çñ)",
          color=:blue, lw=2, marker=:circle, markersize=3)
    # add labels
    xlabel!("Œª·µ• [MPa]")
    ylabel!("u·µ£ [mm]")
    display(fig)
end

run_cylinder_internal_pressure_example()

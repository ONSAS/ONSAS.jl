# ---------------------
# Clamped truss example
# ---------------------
#=
This model is a static generalization taken from [3].
[3] https://github.com/JuliaReach/SetPropagation-FEM-Examples/blob/main/examples/Clamped/Clamped_Model.jl
=#
using Test, LinearAlgebra
using ONSAS

"Return the problem parameters"
function parameters()
    N = 100               # Number of elements.
    E = 30e6              # Young's modulus.
    ŒΩ = 0.3               # Poisson's ratio.
    œÅ = 7.3e-4            # Density.
    L = 200               # Element length.
    A = 1                 # Cross section area.
    F = 10e6              # Force at the tip
    œµ_model = GreenStrain # Strain model
    NSTEPS = 10           # Number of load factors steps

    (; NSTEPS, œµ_model, N, E, ŒΩ, œÅ, L, A, F)
end;

"Return the problem structural model"
function structure()
    (; N, E, ŒΩ, œÅ, L, A, F, œµ_model) = parameters()
    # -------------
    # Mesh
    # -------------
    nodes = [Node(l) for l in LinRange(0, L, N + 1)]
    elements = [Truss(nodes[i], nodes[i + 1], Square(sqrt(A)), œµ_model)
                for i in 1:N]
    mesh = Mesh(; nodes, elements)
    # -------------------------------
    # Dofs
    #--------------------------------
    dof_dim = 1
    set_dofs!(mesh, :u, dof_dim)
    # -------------------------------
    # Materials
    # -------------------------------
    steel = SVK(; E=E, ŒΩ=ŒΩ, œÅ=œÅ, label="steel")
    materials = StructuralMaterial(steel => elements)
    # -------------------------------
    # Boundary conditions
    # -------------------------------
    bc‚ÇÅ = FixedDof(:u, [1], "fixed_u‚Çì")
    bc‚ÇÇ = GlobalLoad(:u, t -> [F * t], "load in j")
    # Apply bcs to the nodes
    boundary_conditions = StructuralBoundaryCondition(bc‚ÇÅ => [first(nodes)], bc‚ÇÇ => [last(nodes)])

    Structure(mesh, materials, boundary_conditions)
end;

"Return the problem solution"
function solve()
    s = structure()
    # -------------------------------
    # Structural Analysis
    # -------------------------------
    (; NSTEPS) = parameters()
    sa = NonLinearStaticAnalysis(s; NSTEPS=NSTEPS)
    # -------------------------------
    # Numerical solution
    # -------------------------------
    solve!(sa, NewtonRaphson())
end;

"Test problem solution"
function test(sol::AbstractSolution)
    (; F, œµ_model, E, A, L) = parameters()
    # Force and displacement at the tip
    sa = analysis(sol)
    vec_nodes = ONSAS.nodes(mesh(ONSAS.structure(sa)))
    numeric_u·µ¢ = displacements(sol, last(vec_nodes))[1]
    numeric_P_tip = F * load_factors(sa)
    #-----------------------------
    # Analytic solution
    #-----------------------------
    # Compute the analytic values for the strain, stress and force at the tip
    "Analytic force given `u·µ¢` towards x axis at the tip node"
    function analytic_P(::Type{GreenStrain}, u·µ¢::Real, E::Real=E, l‚ÇÄ::Real=L, A‚ÇÄ::Real=A)
        œµ_green = 0.5 * ((l‚ÇÄ + u·µ¢)^2 - l‚ÇÄ^2) / (l‚ÇÄ^2)
        # Cosserat stress
        ùêí‚ÇÅ‚ÇÅ = E * œµ_green
        # Piola stress
        ùêè‚ÇÅ‚ÇÅ = (l‚ÇÄ + u·µ¢) / l‚ÇÄ * ùêí‚ÇÅ‚ÇÅ
        ùêè‚ÇÅ‚ÇÅ * A‚ÇÄ
    end
    #
    analytic_P_tip = analytic_P.(Ref(œµ_model), numeric_u·µ¢)
    @testset "Piola-Kirchoff tensor at the right-most node" begin
        @test analytic_P_tip ‚âà numeric_P_tip rtol = 1e-3
    end
end

"Run the example"
function run()
    sol = solve()
    test(sol)
end

run()

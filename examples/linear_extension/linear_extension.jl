# ---------------------------------------------------------------- 
# Uniaxial Extension Example 1  from (Zerpa et. Al., 2019, CMAME).
# ----------------------------------------------------------------
using ONSAS.StaticAnalyses
using Test: @test, @testset
using StaticArrays: SVector
using LinearAlgebra: norm
## scalar parameters
E = 2.0                          # Young modulus in Pa
ŒΩ = 0.4                          # Poisson's ratio
p = 3                            # Tension load in Pa
const tension(t) = p * t         # Tension load function
L·µ¢ = 2.0                         # Dimension in x of the box in m 
L‚±º = 1.0                         # Dimension in y of the box in m
L‚Çñ = 1.0                         # Dimension in z of the box in m
const RTOL = 1e-4                # Relative tolerance for tests
const NSTEPS = 9                 # Number of steps for the test
include("./linear_extension_mesh.jl")   # Mesh Cube with Gmsh.jl
# -------------------------------
# Materials
# -------------------------------
mat_label = "mat"
mat = IsotropicLinearElastic(E, ŒΩ, mat_label)
# mat = SVK(E=E, ŒΩ=ŒΩ, label=mat_label)
s_materials = StructuralMaterials([mat])
# -------------------------------
# Boundary conditions
# -------------------------------
# Fixed dofs
bc‚ÇÅ_label = "fixed-ux"
bc‚ÇÅ = FixedDofBoundaryCondition([:u], [1], bc‚ÇÅ_label)
bc‚ÇÇ_label = "fixed-uj"
bc‚ÇÇ = FixedDofBoundaryCondition([:u], [2], bc‚ÇÇ_label)
bc‚ÇÉ_label = "fixed-uk"
bc‚ÇÉ = FixedDofBoundaryCondition([:u], [3], bc‚ÇÉ_label)
# Load
bc‚ÇÑ_label = "tension"
bc‚ÇÑ = GlobalLoadBoundaryCondition([:u], t -> [tension(t), 0, 0], bc‚ÇÑ_label)
# Create the  bcs vector
vbc = [bc‚ÇÅ, bc‚ÇÇ, bc‚ÇÉ, bc‚ÇÑ]
bc_labels = [bc‚ÇÅ_label, bc‚ÇÇ_label, bc‚ÇÉ_label, bc‚ÇÑ_label]
s_boundary_conditions = StructuralBoundaryConditions(vbc)
# -------------------------------
# Entities
# -------------------------------
# Entities types without assigned nodes, faces and elements
faces_label = "triangle"
elems_label = "tetrahedron"
vfaces = [TriangularFace(faces_label)]
velems = [Tetrahedron(elems_label)]
entities_labels = [faces_label, elems_label]
s_entities = StructuralEntities(velems, vfaces)
# -------------------------------
# Mesh
# -------------------------------
filename = "linear_extension"
labels = [mat_label, entities_labels, bc_labels]
file_name_mesh = create_mesh(L·µ¢, L‚±º, L‚Çñ, labels, filename)
msh_file = MshFile(file_name_mesh)
# -------------------------------
# Structure
# -------------------------------
s = Structure(msh_file, s_materials, s_boundary_conditions, s_entities)
# -------------------------------
# Structural Analysis
# -------------------------------
sa = LinearStaticAnalysis(s, NSTEPS=NSTEPS)
# -------------------------------
# Numerical solution
# -------------------------------
states_sol = solve(sa)
# Select random points to test the solution
## Displacements
x‚ÇÄ_rand = L·µ¢ * rand(2)
y‚ÇÄ_rand = L‚±º * rand(2)
z‚ÇÄ_rand = L‚Çñ * rand(2)
p‚ÇÅ = SVector(x‚ÇÄ_rand[1], y‚ÇÄ_rand[1], z‚ÇÄ_rand[1])
p‚ÇÇ = SVector(x‚ÇÄ_rand[2], y‚ÇÄ_rand[2], z‚ÇÄ_rand[2])
# Evaluate the solution at p‚ÇÅ, p‚ÇÇ
eval_handler_rand = PointEvalHandler(mesh(s), [p‚ÇÅ, p‚ÇÇ])
# rand points displacements
# point 1
u·µ¢_numeric_p‚ÇÅ = displacements(states_sol, eval_handler_rand, 1)[1]
u‚±º_numeric_p‚ÇÅ = displacements(states_sol, eval_handler_rand, 2)[1]
u‚Çñ_numeric_p‚ÇÅ = displacements(states_sol, eval_handler_rand, 3)[1]
# point 2
u·µ¢_numeric_p‚ÇÇ = displacements(states_sol, eval_handler_rand, 1)[2]
u‚±º_numeric_p‚ÇÇ = displacements(states_sol, eval_handler_rand, 2)[2]
u‚Çñ_numeric_p‚ÇÇ = displacements(states_sol, eval_handler_rand, 3)[2]
## Strain and stresses
# Evaluate the solution at a random element
e_rand = rand(elements(s))
œµ_e_rand = stress(states_sol, e_rand)
œµ·µ¢_numeric_e_rand = getindex.(œµ_e_rand, 1)
œµ‚±º_numeric_e_rand = getindex.(œµ_e_rand, 2)
œµ‚Çñ_numeric_e_rand = getindex.(œµ_e_rand, 2)
# -------------------------------
# Analytic solution
# -------------------------------
## Displacements
"Computes displacements numeric solution u·µ¢, u‚±º and u‚Çñ for analytic validation."
function u_ijk_analytic(Œª·µ•::Vector{<:Real}, x‚ÇÄ::Real, y‚ÇÄ::Real, z‚ÇÄ::Real, ŒΩ::Real=ŒΩ, E::Real=E)

    ùê∂(t) = tension(t) * (1 - ŒΩ - 2ŒΩ^2) / (1 - ŒΩ)

    u·µ¢(t) = ùê∂(t) / E * x‚ÇÄ
    u‚±º(t) = 0.0
    u‚Çñ(t) = 0.0

    return [[u·µ¢(t) for t in Œª·µ•], [u‚±º(t) for t in Œª·µ•], [u‚Çñ(t) for t in Œª·µ•]]
end
# point 1
u_analytic_p‚ÇÅ = u_ijk_analytic(load_factors(sa), p‚ÇÅ[1], p‚ÇÅ[2], p‚ÇÅ[3])
u·µ¢_analytic_p‚ÇÅ = u_analytic_p‚ÇÅ[1]
u‚±º_analytic_p‚ÇÅ = u_analytic_p‚ÇÅ[2]
u‚Çñ_analytic_p‚ÇÅ = u_analytic_p‚ÇÅ[3]
# point 2
u_analytic_p‚ÇÇ = u_ijk_analytic(load_factors(sa), p‚ÇÇ[1], p‚ÇÇ[2], p‚ÇÇ[3])
u·µ¢_analytic_p‚ÇÇ = u_analytic_p‚ÇÇ[1]
u‚±º_analytic_p‚ÇÇ = u_analytic_p‚ÇÇ[2]
u‚Çñ_analytic_p‚ÇÇ = u_analytic_p‚ÇÇ[3]
## Strains
"Computes strains numeric solution œµ·µ¢, œµ‚±º and œµ‚Çñ for analytic validation."
function œµ_ijk_analytic(Œª·µ•::Vector{<:Real}, x‚ÇÄ::Real, y‚ÇÄ::Real, z‚ÇÄ::Real, ŒΩ::Real=ŒΩ, E::Real=E)

    ùê∂(t) = tension(t) * (1 - ŒΩ - 2ŒΩ^2) / (1 - ŒΩ)

    œµ·µ¢(t) = ùê∂(t) / E
    œµ‚±º(t) = 0.0
    œµ‚Çñ(t) = 0.0

    return [[œµ·µ¢(t) for t in Œª·µ•], [œµ‚±º(t) for t in Œª·µ•], [œµ‚Çñ(t) for t in Œª·µ•]]
end
# point in the rand element selected
p_rand_e = rand(coordinates(e_rand))
œµ_analytic_p_rand_e = œµ_ijk_analytic(load_factors(sa), p_rand_e[1], p_rand_e[2], p_rand_e[3])
œµ·µ¢_analytic_p_rand_e = œµ_analytic_p_rand_e[1]
œµ‚±º_analytic_p_rand_e = œµ_analytic_p_rand_e[2]
œµ‚Çñ_analytic_p_rand_e = œµ_analytic_p_rand_e[3]
#-----------------------------
# Test boolean for CI  
#-----------------------------
@testset "Linear Extension example" begin
    # Displacements
    @test u·µ¢_numeric_p‚ÇÅ ‚âà u·µ¢_analytic_p‚ÇÅ rtol = RTOL
    @test norm(u‚±º_numeric_p‚ÇÅ) ‚âà 0 atol = RTOL
    @test norm(u‚Çñ_numeric_p‚ÇÅ) ‚âà 0 atol = RTOL
    @test u·µ¢_numeric_p‚ÇÇ ‚âà u·µ¢_analytic_p‚ÇÇ rtol = RTOL
    @test norm(u‚±º_numeric_p‚ÇÇ) ‚âà 0 atol = RTOL
    @test norm(u‚Çñ_numeric_p‚ÇÇ) ‚âà 0 atol = RTOL
    # Strains
    @test œµ·µ¢_numeric_e_rand ‚âà œµ·µ¢_e_rand rtol = RTOL
    @test norm(œµ‚±º_numeric_e_rand) ‚âà 0 atol = RTOL
    @test norm(œµ‚Çñ_numeric_e_rand) ‚âà 0 atol = RTOL
end
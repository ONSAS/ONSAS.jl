# --------------------------------------------------------------------------
# Uniaxial Extension ExampleExercise 4 from section 6.5 in (Holzapfel,2000).
# For notation see: https://onsas.github.io/ONSAS.m/dev/examples/uniaxialExtension/
# --------------------------------------------------------------------------
using Test, LinearAlgebra, Suppressor, Roots
using Dictionaries: dictionary
using ONSAS

include("uniaxial_mesh.jl") # Mesh Cube with Gmsh.jl

function run_uniaxial_extension()
    ## scalar parameters
    E = 1.0                    # Young modulus in Pa
    ŒΩ = 0.3                    # Poisson's ratio
    p = 3                      # Tension load in Pa
    L·µ¢ = 2.0                   # Dimension in x of the box in m
    L‚±º = 1.0                   # Dimension in y of the box in m
    L‚Çñ = 1.0                   # Dimension in z of the box in m
    ms = 0.5                   # Refinement factor for the mesh
    RTOL = 1e-4                # Relative tolerance for tests
    # -----------------------------------------------
    # Case 1 - Manufactured mesh and `SVK` material
    #------------------------------------------------
    # -------------------------------
    # Mesh
    #--------------------------------
    n‚ÇÅ = Node(0.0, 0.0, 0.0)
    n‚ÇÇ = Node(0.0, 0.0, L‚Çñ)
    n‚ÇÉ = Node(0.0, L‚±º, L‚Çñ)
    n‚ÇÑ = Node(0.0, L‚±º, 0.0)
    n‚ÇÖ = Node(L·µ¢, 0.0, 0.0)
    n‚ÇÜ = Node(L·µ¢, 0.0, L‚Çñ)
    n‚Çá = Node(L·µ¢, L‚±º, L‚Çñ)
    n‚Çà = Node(L·µ¢, L‚±º, 0.0)
    vec_nodes = [n‚ÇÅ, n‚ÇÇ, n‚ÇÉ, n‚ÇÑ, n‚ÇÖ, n‚ÇÜ, n‚Çá, n‚Çà]
    s‚ÇÅ_mesh = Mesh(; nodes=vec_nodes)
    ## Faces
    f‚ÇÅ = TriangularFace(n‚ÇÖ, n‚Çà, n‚ÇÜ, "loaded_face_1")
    f‚ÇÇ = TriangularFace(n‚ÇÜ, n‚Çà, n‚Çá, "loaded_face_2")
    f‚ÇÉ = TriangularFace(n‚ÇÑ, n‚ÇÅ, n‚ÇÇ, "x=0_face_1")
    f‚ÇÑ = TriangularFace(n‚ÇÑ, n‚ÇÇ, n‚ÇÉ, "x=0_face_2")
    f‚ÇÖ = TriangularFace(n‚ÇÜ, n‚ÇÇ, n‚ÇÅ, "y=0_face_1")
    f‚ÇÜ = TriangularFace(n‚ÇÜ, n‚ÇÅ, n‚ÇÖ, "y=0_face_2")
    f‚Çá = TriangularFace(n‚ÇÅ, n‚ÇÑ, n‚ÇÖ, "z=0_face_1")
    f‚Çà = TriangularFace(n‚ÇÑ, n‚Çà, n‚ÇÖ, "z=0_face_2")
    vec_faces = [f‚ÇÅ, f‚ÇÇ, f‚ÇÉ, f‚ÇÑ, f‚ÇÖ, f‚ÇÜ, f‚Çá, f‚Çà]
    append!(faces(s‚ÇÅ_mesh), vec_faces)
    ## Entities
    t‚ÇÅ = Tetrahedron(n‚ÇÅ, n‚ÇÑ, n‚ÇÇ, n‚ÇÜ, "tetra_1")
    t‚ÇÇ = Tetrahedron(n‚ÇÜ, n‚ÇÇ, n‚ÇÉ, n‚ÇÑ, "tetra_2")
    t‚ÇÉ = Tetrahedron(n‚ÇÑ, n‚ÇÉ, n‚ÇÜ, n‚Çá, "tetra_3")
    t‚ÇÑ = Tetrahedron(n‚ÇÑ, n‚ÇÅ, n‚ÇÖ, n‚ÇÜ, "tetra_4")
    t‚ÇÖ = Tetrahedron(n‚ÇÑ, n‚ÇÜ, n‚ÇÖ, n‚Çà, "tetra_5")
    t‚ÇÜ = Tetrahedron(n‚ÇÑ, n‚Çá, n‚ÇÜ, n‚Çà, "tetra_6")
    vec_elems = [t‚ÇÅ, t‚ÇÇ, t‚ÇÉ, t‚ÇÑ, t‚ÇÖ, t‚ÇÜ]
    append!(elements(s‚ÇÅ_mesh), vec_elems)
    # -------------------------------
    # Dofs
    #--------------------------------
    dof_dim = 3
    dof_u_symbol = :u
    apply!(s‚ÇÅ_mesh, dof_u_symbol, dof_dim)
    # -------------------------------
    # Materials
    # -------------------------------
    svk = Svk(; E=E, ŒΩ=ŒΩ, label="svk")
    mat_dict = dictionary([svk => [t‚ÇÅ, t‚ÇÇ, t‚ÇÉ, t‚ÇÑ, t‚ÇÖ, t‚ÇÜ]])
    s‚ÇÅ_materials = StructuralMaterial(mat_dict)
    # -------------------------------
    # Boundary conditions
    # -------------------------------
    # Fixed dofs
    bc‚ÇÅ_label = "fixed-ux"
    bc‚ÇÅ = FixedDof(:u, [1], bc‚ÇÅ_label)
    bc‚ÇÇ_label = "fixed-uj"
    bc‚ÇÇ = FixedDof(:u, [2], bc‚ÇÇ_label)
    bc‚ÇÉ_label = "fixed-uk"
    bc‚ÇÉ = FixedDof(:u, [3], bc‚ÇÉ_label)
    # Load
    bc‚ÇÑ_label = "tension"
    bc‚ÇÑ = GlobalLoad(:u, t -> [p * t, 0, 0], bc‚ÇÑ_label)
    # Assign this to faces
    face_bc = dictionary([bc‚ÇÅ => [f‚ÇÉ, f‚ÇÑ], bc‚ÇÇ => [f‚ÇÖ, f‚ÇÜ], bc‚ÇÉ => [f‚Çá, f‚Çà], bc‚ÇÑ => [f‚ÇÅ, f‚ÇÇ]])
    # Crete boundary conditions struct
    s‚ÇÅ_boundary_conditions = StructuralBoundaryCondition(; face_bcs=face_bc)
    bc_labels = [bc‚ÇÅ_label, bc‚ÇÇ_label, bc‚ÇÉ_label, bc‚ÇÑ_label]
    # -------------------------------
    # Structure
    # -------------------------------
    s‚ÇÅ = Structure(s‚ÇÅ_mesh, s‚ÇÅ_materials, s‚ÇÅ_boundary_conditions)
    # -------------------------------
    # Structural Analysis
    # -------------------------------
    # Final load factor
    NSTEPS = 8
    sa‚ÇÅ = NonLinearStaticAnalysis(s‚ÇÅ; NSTEPS=NSTEPS)
    # -------------------------------
    # Algorithm
    # -------------------------------
    tol_f = 1e-8
    tol_u = 1e-8
    max_iter = 30
    tols = ConvergenceSettings(tol_u, tol_f, max_iter)
    nr = NewtonRaphson(tols)
    # -------------------------------
    # Numerical solution
    # -------------------------------
    states_sol_case‚ÇÅ = ONSAS.solve!(sa‚ÇÅ, nr)
    "Computes numeric solution Œ±, Œ≤ and Œ≥ for analytic validation."
    function Œ±Œ≤Œ≥_numeric(states_sol::AbstractSolution)
        s = structure(analysis(states_sol))
        # Node at (L·µ¢, L‚±º, L‚Çñ)
        n‚Çá = nodes(s)[7]
        numerical_u·µ¢ = displacements(states_sol_case‚ÇÅ, n‚Çá, 1)
        numerical_Œ± = 1 .+ numerical_u·µ¢ / L·µ¢
        # Displacements in the y (component 2) axis at node 7
        numerical_u‚±º = displacements(states_sol_case‚ÇÅ, n‚Çá, 2)
        numerical_Œ≤ = 1 .+ numerical_u‚±º / L‚±º
        # Displacements in the z (component 3) axis at node 7
        numerical_u‚Çñ = displacements(states_sol_case‚ÇÅ, n‚Çá, 3)
        numerical_Œ≥ = 1 .+ numerical_u‚Çñ / L‚Çñ
        numerical_Œ±, numerical_Œ≤, numerical_Œ≥, numerical_u·µ¢, numerical_u‚±º, numerical_u‚Çñ
    end
    # Numeric solution for testing
    numeric_Œ±_case‚ÇÅ, numeric_Œ≤_case‚ÇÅ, numeric_Œ≥_case‚ÇÅ, numeric_u·µ¢_case‚ÇÅ, _, _ = Œ±Œ≤Œ≥_numeric(states_sol_case‚ÇÅ)
    # Extract ‚Ñô and ‚ÑÇ from the last state using a random element
    e = rand(elements(s‚ÇÅ))
    # Cosserat or second Piola-Kirchhoff stress tensor
    ‚Ñô_numeric_case‚ÇÅ = last(stress(states_sol_case‚ÇÅ, e))
    # Right hand Cauchy strain tensor
    ‚ÑÇ_numeric_case‚ÇÅ = last(strain(states_sol_case‚ÇÅ, e))
    # Load factors
    numeric_Œª·µ•_case‚ÇÅ = load_factors(sa‚ÇÅ)
    # -----------------------------------------------
    # Case 2 - GMSH mesh and `HyperElastic` material
    #------------------------------------------------
    # -------------------------------
    # Materials
    # -------------------------------
    # Define a new HyperElastic material from the strain energy function
    strain_energy_svk(ùîº::AbstractMatrix, Œª::Real, G::Real) = (Œª / 2) * tr(ùîº)^2 + G * tr(ùîº^2)
    Œª, G = lame_parameters(svk)
    params = [Œª, G] # The order must be the same defined in the strain energy(splatting)
    mat_label = "svkHyper"
    svk_hyper_elastic = HyperElastic(params, strain_energy_svk, mat_label)
    # Material types without assigned elements
    s_materials = StructuralMaterial(svk_hyper_elastic)
    # -------------------------------
    # Boundary Conditions
    # -------------------------------
    # Redefine the load boundary condition
    bc‚ÇÑ = Pressure(:u, t -> -p * t, bc‚ÇÑ_label)
    # BoundaryConditions types without assigned node, feces and elements
    s_boundary_conditions = StructuralBoundaryCondition(bc‚ÇÅ, bc‚ÇÇ, bc‚ÇÉ, bc‚ÇÑ)
    # -------------------------------
    # Entities
    # -------------------------------
    # Entities types without assigned nodes, faces and elements
    faces_label = "triangle"
    elems_label = "tetrahedron"
    vfaces = [TriangularFace(faces_label)]
    velems = [Tetrahedron(elems_label)]
    s_entities = StructuralEntity(velems, vfaces)
    entities_labels = [faces_label, elems_label]
    # -------------------------------
    # Mesh
    # -------------------------------
    filename = "uniaxial_extension"
    labels = [mat_label, entities_labels, bc_labels]
    local mesh_path
    output = @capture_out begin
        mesh_path = create_uniaxial_mesh(L·µ¢, L‚±º, L‚Çñ, labels, filename, ms)
    end
    gmsh_println(output)
    msh_file = MshFile(mesh_path)
    # -------------------------------
    # Structure
    # -------------------------------
    s‚ÇÇ = Structure(msh_file, s_materials, s_boundary_conditions, s_entities)
    # Final load factor
    sa‚ÇÇ = NonLinearStaticAnalysis(s‚ÇÇ; NSTEPS=NSTEPS)
    # -------------------------------
    # Numerical solution
    # -------------------------------
    states_sol_case‚ÇÇ = ONSAS.solve!(sa‚ÇÇ, nr)
    # Numeric solution for testing
    numeric_Œ±_case‚ÇÇ, numeric_Œ≤_case‚ÇÇ, numeric_Œ≥_case‚ÇÇ, numeric_u·µ¢_case‚ÇÇ, _, _ = Œ±Œ≤Œ≥_numeric(states_sol_case‚ÇÇ)
    # Extract ‚Ñô and ‚ÑÇ from the last state using a random element
    e = rand(elements(s‚ÇÇ))
    # Cosserat or second Piola-Kirchhoff stress tensor
    ‚Ñô_numeric_case‚ÇÇ = last(stress(states_sol_case‚ÇÇ, e))
    # Right hand Cauchy strain tensor
    ‚ÑÇ_numeric_case‚ÇÇ = last(strain(states_sol_case‚ÇÇ, e))
    # Load factors
    numeric_Œª·µ•_case‚ÇÇ = load_factors(sa‚ÇÇ)
    #-----------------------------
    # Analytic solution
    #-----------------------------
    "Computes displacements numeric solution u·µ¢, u‚±º and u‚Çñ for analytic validation."
    function u_ijk_numeric(numerical_Œ±::Vector{<:Real}, numerical_Œ≤::Vector{<:Real},
                           numerical_Œ≥::Vector{<:Real},
                           x::Real, y::Real, z::Real)
        x * (numerical_Œ± .- 1), y * (numerical_Œ≤ .- 1), z * (numerical_Œ≥ .- 1)
    end
    # Test with load factors
    "Analytic load factor solution for the displacement `u·µ¢` towards `x` axis at node `n‚ÇÜ`."
    function load_factors_analytic(u·µ¢::Real, p::Real=p, E::Real=E, L·µ¢::Real=L·µ¢)
        1 / p * E * 0.5 * ((1 + u·µ¢ / L·µ¢)^3 - (1 + u·µ¢ / L·µ¢))
    end
    # Compute load factors with numerical solutions
    analytics_Œª·µ•_case‚ÇÅ = load_factors_analytic.(numeric_u·µ¢_case‚ÇÅ)
    analytics_Œª·µ•_case‚ÇÇ = load_factors_analytic.(numeric_u·µ¢_case‚ÇÇ)
    # Test last step œÉ and œµ
    @test load_factors(sa‚ÇÅ) == load_factors(sa‚ÇÇ)
    Œ±_analytic = find_zero(Œ± -> E / 2 * Œ± * (Œ±^2 - 1) - p * last(load_factors(sa‚ÇÅ)), 1e-2)
    Œ≤_analytic = sqrt(-ŒΩ * (Œ±_analytic^2 - 1) + 1)
    # Gradient tensor
    # ùë¢ = (Œ±x, Œ≤y, Œ≥z)
    ùîΩ_analytic = [Œ±_analytic 0 0
                  0 Œ≤_analytic 0
                  0 0 Œ≤_analytic]
    # Right hand Cauchy tensor
    ‚ÑÇ_analytic = ùîΩ_analytic' * ùîΩ_analytic
    ùïÅ = det(‚ÑÇ_analytic)
    # Green-Lagrange strain tensor
    ùïÄ = eye(3)
    ùîº_analytic = 1 / 2 * (‚ÑÇ_analytic - ùïÄ)
    # Cosserat or second Piola-Kirchhoff stress tensor
    p‚ÇÅ, p‚ÇÇ = lame_parameters(svk)
    ùïä_analytic = p‚ÇÅ * tr(ùîº_analytic) * eye(3) + 2 * p‚ÇÇ * ùîº_analytic
    # First Piola-Kirchhoff stress tensor
    ‚Ñô_analytic = ùîΩ_analytic * ùïä_analytic
    # Cauchy stress tensor
    # œÉ = ‚Ñô_analytic * ùîΩ_analytic'
    # -------------------------------
    # Interpolator tests for Case 2
    #--------------------------------
    rand_point = [[rand() * L·µ¢, rand() * L‚±º, rand() * L‚Çñ]]
    eval_handler_rand = PointEvalHandler(mesh(s‚ÇÇ), rand_point)
    # Compute analytic solution at a random point
    u·µ¢_case‚ÇÇ, u‚±º_case‚ÇÇ, u‚Çñ_case‚ÇÇ = u_ijk_numeric(numeric_Œ±_case‚ÇÇ, numeric_Œ≤_case‚ÇÇ, numeric_Œ≥_case‚ÇÇ,
                                                 rand_point[]...)
    rand_point_u·µ¢ = displacements(states_sol_case‚ÇÇ, eval_handler_rand, 1)
    rand_point_u‚±º = displacements(states_sol_case‚ÇÇ, eval_handler_rand, 2)
    rand_point_u‚Çñ = displacements(states_sol_case‚ÇÇ, eval_handler_rand, 3)
    #-----------------------------
    # Test booleans
    #-----------------------------
    @testset "Case 1 Uniaxial Extension Example" begin
        @test analytics_Œª·µ•_case‚ÇÅ ‚âà numeric_Œª·µ•_case‚ÇÅ rtol = RTOL
        @test ‚Ñô_analytic ‚âà ‚Ñô_numeric_case‚ÇÅ rtol = RTOL
        @test Œ±_analytic ‚âà last(numeric_Œ±_case‚ÇÅ) rtol = RTOL
        @test ‚ÑÇ_analytic ‚âà ‚ÑÇ_numeric_case‚ÇÅ rtol = RTOL
    end

    @testset "Case 2 Uniaxial Extension Example" begin
        @test analytics_Œª·µ•_case‚ÇÇ ‚âà numeric_Œª·µ•_case‚ÇÇ rtol = RTOL
        @test ‚ÑÇ_analytic ‚âà ‚ÑÇ_numeric_case‚ÇÇ rtol = RTOL
        @test ‚Ñô_analytic ‚âà ‚Ñô_numeric_case‚ÇÇ rtol = RTOL
        @test Œ≤_analytic ‚âà last(numeric_Œ≤_case‚ÇÇ) rtol = RTOL
        # Interpolations
        @test u·µ¢_case‚ÇÇ ‚âà rand_point_u·µ¢ rtol = RTOL
        @test u‚±º_case‚ÇÇ ‚âà rand_point_u‚±º rtol = RTOL
        @test u‚Çñ_case‚ÇÇ ‚âà rand_point_u‚Çñ rtol = RTOL
    end
end

run_uniaxial_extension()

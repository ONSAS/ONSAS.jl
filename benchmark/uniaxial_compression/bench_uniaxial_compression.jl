using LinearAlgebra

# Strain energy function of an hyperelastic material used in the benchmark.
function strain_energy_neo(ùîº::AbstractMatrix, K::Real, Œº::Real)
    # Right hand Cauchy strain tensor
    ‚ÑÇ = Symmetric(2 * ùîº + eye(3))
    J = sqrt(det(‚ÑÇ))
    # First invariant
    I‚ÇÅ = tr(‚ÑÇ)
    # Strain energy function
    Œ® = Œº / 2 * (I‚ÇÅ - 2 * log(J)) + K / 2 * (J - 1)^2
end

# Include `create_mesh` function.
include(joinpath(pkgdir(ONSAS), "examples", "uniaxial_extension", "uniaxial_mesh.jl"))

"""
Uniaxial compression Case 2 - GMSH mesh and `HyperElastic` material.

`ms` is the refinement factor of the mesh.
"""
function uniaxial_compression_structure(; ms=0.5)

    # x, y and z dimensions of the box in the mesh respectively.
    L·µ¢ = 2.0
    L‚±º = 1.0
    L‚Çñ = 1.0

    E = 1.0                    # Young modulus in Pa
    ŒΩ = 0.3                    # Poisson's ratio
    K = E / (3 * (1 - 2 * ŒΩ))  # Bulk modulus in Pa
    Œº = G = E / (2 * (1 + ŒΩ))  # Second Lam√© parameter in Pa
    mat_label = "neoHyper"
    neo_hookean_hyper = HyperElastic([K, Œº], strain_energy_neo, "neoHyper")

    # Tension load in Pa.
    p = -1

    # Material types without assigned elements.
    materials = StructuralMaterial(neo_hookean_hyper)

    # Dirichlet boundary conditions
    bc‚ÇÅ_label = "fixed-ux"
    bc‚ÇÇ_label = "fixed-uj"
    bc‚ÇÉ_label = "fixed-uk"
    bc‚ÇÑ_label = "tension"
    bc‚ÇÅ = FixedField(:u, [1], bc‚ÇÅ_label)
    bc‚ÇÇ = FixedField(:u, [2], bc‚ÇÇ_label)
    bc‚ÇÉ = FixedField(:u, [3], bc‚ÇÉ_label)

    # Neumann boundary conditions
    bc‚ÇÑ = Pressure(:u, t -> p * t, bc‚ÇÑ_label)
    bc_labels = [bc‚ÇÅ_label, bc‚ÇÇ_label, bc‚ÇÉ_label, bc‚ÇÑ_label]

    # BoundaryConditions types without assigned node, feces and elements.
    boundary_conditions = StructuralBoundaryCondition(bc‚ÇÅ, bc‚ÇÇ, bc‚ÇÉ, bc‚ÇÑ)

    # Entities types without assigned nodes, faces and elements.
    faces_label = "triangle"
    elems_label = "tetrahedron"
    vfaces = [TriangularFace(faces_label)]
    velems = [Tetrahedron(elems_label)]
    entities = StructuralEntity(velems, vfaces)
    entities_labels = [faces_label, elems_label]

    # Create mesh and retrieve the Structure
    entities_labels = [faces_label, elems_label]
    filename = basename(tempname())
    labels = [mat_label, entities_labels, bc_labels]
    dir = joinpath(pkgdir(ONSAS), "benchmark", "uniaxial_compression")
    mesh = MshFile(create_uniaxial_mesh(L·µ¢, L‚±º, L‚Çñ, labels, filename, ms, dir))
    return Structure(mesh, materials, boundary_conditions, entities)
end
